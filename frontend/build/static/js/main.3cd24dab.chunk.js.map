{"version":3,"sources":["ethereum/web3.js","components/Home.js","ethereum/contractInstance.js","components/HelloWorld.js","App.js","serviceWorker.js","index.js"],"names":["web3","Component","_callee","regenerator_default","a","wrap","_context","prev","next","eth","getAccounts","sent","alert","stop","this","window","Web3","currentProvider","get_account","provider","providers","HttpProvider","net","getNetworkType","err","netId","ContractInstance","Contract","constant","inputs","name","type","outputs","payable","stateMutability","config","clientId","App","_this","authContext","AuthenticationContext","handleWindowCallback","react_default","createElement","className","onClick","login","logout","user","getCachedUser","console","log","logOut","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iPAEIA,kICEeC,wIDoBnB,SAAAC,IAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACqBR,EAAKS,IAAIC,cAD9B,OAEuB,MAFvBJ,EAAAK,KAEiB,IAEbC,MAAM,6CAJV,wBAAAN,EAAAO,SAAAX,EAAAY,gCAQA,GAAsB,qBAAXC,QAAiD,qBAAhBA,OAAOf,KAKjDA,EAAO,IAAIgB,IAAKD,OAAOf,KAAKiB,oDAC5BC,OAEG,CAGHN,MAAM,4CACN,IAAMO,EAAW,IAAIH,IAAKI,UAAUC,aAAa,4DACjDrB,EAAO,IAAIgB,IAAKG,GAzChBnB,EAAKS,IAAIa,IAAIC,eAAe,SAACC,EAAKC,GAClC,OAAQA,GACN,IAAK,OACLb,MAAM,wDACN,MACA,IAAK,UACLA,MAAM,qEACN,MACA,IAAK,UACLA,MAAM,qEACN,MACA,IAAK,QACLA,MAAM,sEAkCKZ,QE1CA0B,EADU,IAAI1B,EAAKS,IAAIkB,SAH5B,CAAC,CAACC,UAAY,EAAMC,OAAU,CAAC,CAACC,KAAQ,OAAOC,KAAQ,WAAWD,KAAQ,UAAUE,QAAW,GAAGC,SAAW,EAAMC,gBAAmB,aAAaH,KAAQ,YAAY,CAACH,UAAY,EAAKC,OAAU,GAAGC,KAAQ,SAASE,QAAW,CAAC,CAACF,KAAQ,GAAGC,KAAQ,WAAWE,SAAW,EAAMC,gBAAmB,OAAOH,KAAQ,aADjT,iDCGW9B,6BCGrBkC,EAAQ,CACRC,SAAU,wCAoCCC,mLAhCJ,IAAAC,EAAAxB,KAEHyB,EAAc,IAAIC,IAAsBL,GAI5C,OAHAI,EAAYE,uBAIVC,EAAAtC,EAAAuC,cAAA,OAAKC,UAAU,OACXF,EAAAtC,EAAAuC,cAAA,8BACAD,EAAAtC,EAAAuC,cAAA,UAAQE,QAAS,WAAQP,EAAKQ,MAAMP,IAC5BK,UAAU,4BADlB,SAEAF,EAAAtC,EAAAuC,cAAA,UAAQE,QAAS,WAAQP,EAAKS,OAAOR,IAC7BK,UAAU,4BADlB,yCAMAL,GACJ,IAAIS,EAAOT,EAAYU,gBAClBD,EAKHE,QAAQC,IAAIH,IAJZT,EAAYO,QACZI,QAAQC,IAAI,gDAMTZ,GACLA,EAAYa,gBA7BAnD,aCDEoD,QACW,cAA7BtC,OAAOuC,SAASC,UAEe,UAA7BxC,OAAOuC,SAASC,UAEhBxC,OAAOuC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhB,EAAAtC,EAAAuC,cAACgB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.3cd24dab.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nlet web3, defaultAcc;\nfunction networkCheck(){\n  web3.eth.net.getNetworkType((err, netId) => {\n  switch (netId) {\n    case \"main\":\n    alert(\"This is Mainnet. Please switch to Azure PoA Network!\");\n    break\n    case \"ropsten\":\n    alert(\"This is Ropsten test network. Please switch to Azure PoA Network!\");\n    break\n    case \"rinkeby\":\n    alert(\"This is Rinkeby test network! Please switch to Azure PoA Network!\");\n    break\n    case \"kovan\":\n    alert(\"This is Kovan test network. Please switch to Azure PoA Network!\");\n    break\n    default:\n    //alert(\"Nice! It looks like you're connected to Azure PoA Network!\");\n  }\n  })\n}\n\nasync function get_account(){\n  defaultAcc = await web3.eth.getAccounts();\n  if (defaultAcc[0] == null){\n    // User is not logged in\n    alert(\"Please Login To MetaMask And Refresh Page\");\n  }\n}\n\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n  // We are in the browser and metamask is running.\n\n  //const provider = new Web3.providers.HttpProvider(\"http://ethygqbek-dns-reg1.eastus.cloudapp.azure.com:8540\");\n  //web3 = new Web3(provider);\n  web3 = new Web3(window.web3.currentProvider);\n  get_account();\n  \n}else{\n  // User is not running metamask\n\n  alert(\"Please Install MetaMask from metamask.io\");\n  const provider = new Web3.providers.HttpProvider(\"http://ethygqbek-dns-reg1.eastus.cloudapp.azure.com:8540\");\n  web3 = new Web3(provider);\n}\n\nnetworkCheck();\n\nexport default web3;","import React, { Component } from 'react';\nimport {Loader, Dimmer} from 'semantic-ui-react';\n//import {Link} from 'react-router-dom';\n\nclass Home extends Component {\n    state = {\n    loadingData:false,\n  }\n\n  async componentDidMount(){\n    this.setState({loadingData:true});\n    document.title = \"Azure UI\";\n    this.setState({loadingData:false});\n  }\n\n  render() {\n    if(this.state.loadingData){\n      return (\n        <Dimmer active inverted>\n        <Loader size='massive'>Loading...</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n      <div>\n        <h1>Hi There!</h1>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import web3 from './web3';\n//import Zatanna from './build/Zatanna.json';\n\nvar address = \"0xdcca47d0396ccdd76fbfe9dc779f619184df9357\";\nvar abi = [{\"constant\": false,\"inputs\": [{\"name\": \"text\",\"type\": \"string\"}],\"name\": \"postMsg\",\"outputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"constant\": true,\"inputs\": [],\"name\": \"getMsg\",\"outputs\": [{\"name\": \"\",\"type\": \"string\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"}];\n\n//const ZatannaInstance = new web3.eth.Contract(JSON.parse(Zatanna.interface), \"0x26f05c41a24a4f393584fea897ace39deb2281c2\");\nconst ContractInstance = new web3.eth.Contract(abi, address);\nexport default ContractInstance;\n","import React, { Component } from 'react';\nimport {Loader, Dimmer, Form, Input, Button, Message} from 'semantic-ui-react';\n//import {Link} from 'react-router-dom';\nimport web3 from '../ethereum/web3';\nimport ContractInstance from '../ethereum/contractInstance';\n\nclass HelloWorld extends Component {\n    state = {\n    loadingData:false,\n    errorMessage:'',\n    msg:'',\n    msgVal:'',\n    account:'',\n    existingMsg:'',\n  }\n\n  async componentDidMount(){\n    this.setState({loadingData:true});\n    document.title = \"Azure UI | HelloWorld\";\n\n    const accounts = await web3.eth.getAccounts();\n    let res = await ContractInstance.methods.getMsg().call({from:accounts[0]});\n    this.setState({loadingData:false, account:accounts[0], existingMsg:res});\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    this.setState({errorMessage:'', loading:true, msg:''});\n    try{\n      let res = await ContractInstance.methods.postMsg(this.state.msgVal).send({from:this.state.account});\n      console.log(res);\n      this.setState({msg:'Message pushed to Azure PoA blockchain!'});\n    }catch(err){\n      console.log(err);\n      this.setState({errorMessage:err.message, msg:''});\n    }\n\n    this.setState({loading:false});\n  }\n\n  render() {\n    if(this.state.loadingData){\n      return (\n        <Dimmer active inverted>\n        <Loader size='massive'>Loading...</Loader>\n        </Dimmer>\n      );\n    }\n\n    let statusMessage;\n\n    if (this.state.msg === ''){\n      statusMessage = null;\n    }else{\n      statusMessage = <Message floating positive header=\"Success!\" content={this.state.msg} />;\n    }\n\n    return (\n      <div>\n        <h1>Hello World Contract!</h1>\n        <h3>Existing message: {this.state.existingMsg}</h3>\n         <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Group>\n            <Form.Field width={12}>\n              <label>Enter Message</label>\n              <Input onChange={event => this.setState({msgVal:event.target.value})} />\n            </Form.Field>\n            <Button size='small' floated='right' primary basic loading={this.state.loading} disabled={this.state.loading}>\n              Push\n            </Button>\n          </Form.Group>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          {statusMessage}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default HelloWorld;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport Layout from './components/Layout';\nimport HelloWorld from './components/HelloWorld';\nimport 'adal-angular';\nimport AuthenticationContext from 'adal-angular';\n\n//Set up adal\nvar config ={\n    clientId: '134a2a3a-6224-4584-93f6-b1f38ce5fbdc',\n};\n\nclass App extends Component {\n  render() {\n    //create authentication Context and check cached users\n    var authContext = new AuthenticationContext(config);\n    authContext.handleWindowCallback();\n\n    //authContext.isCallback(\"tessdfgt\");\n    return (\n      <div className=\"App\">\n          <h1>Azure login test</h1>\n          <button onClick={() => { this.login(authContext) }}\n                  className=\"btn btn-secondary btn-sm\">Login</button>\n          <button onClick={() => { this.logout(authContext) }}\n                  className=\"btn btn-secondary btn-sm\">Logout</button>\n      </div>\n    );\n  }\n\n    login(authContext){\n      var user = authContext.getCachedUser();\n      if (!user) {\n        authContext.login();\n        console.log(\"user is null\")\n      }\n      else {\n        console.log(user);\n      }\n    }\n    logout(authContext) {\n      authContext.logOut();\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}