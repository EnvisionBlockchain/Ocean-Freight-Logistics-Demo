{"version":3,"sources":["helpers/Api.js","App.js","serviceWorker.js","workbench/login.js","components/Header.js","workbench/Dashboard.js","index.js"],"names":["https","require","api","method","path","token","callback","options","hostname","headers","Authorization","get","http_res","data","on","chunk","console","log","err","run","module","exports","App","react_default","a","createElement","className","href","Component","Boolean","window","location","match","config","clientId","Workbench","_this","this","authContext","AuthenticationContext","handleWindowCallback","onClick","login","logout","user","getCachedUser","logOut","Header","Menu","style","marginTop","size","Item","Link","to","position","Icon","name","Dashboard","that","acquireToken","accessToken","context","newToken","routing","BrowserRouter","Route","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.577c9f53.chunk.js","sourcesContent":["const https = require('https');\r\n\r\n\r\nvar api={};\r\n\r\n//api._path='/oauth2/token';\r\n\r\napi.run=function(method, path, token, callback){\r\n    const options = {\r\n      hostname: 'ethpoasanboxwb-ohtlvu-api.azurewebsites.net',\r\n      method: method,\r\n      path: path,\r\n      headers:{\r\n        Authorization: 'Bearer ' + token\r\n      }\r\n    };\r\n\r\n    https.get(options, function(http_res){\r\n      var data = \"\";\r\n\r\n      // this event fires many times, each time collecting another piece of the response\r\n       http_res.on(\"data\", function (chunk) {\r\n           // append this chunk to our growing `data` var\r\n           data += chunk;\r\n       });\r\n\r\n       // this event fires *one* time, after all the `data` events/chunks have been gathered\r\n       http_res.on(\"end\", function () {\r\n            // you can use res.send instead of console.log to output via express\r\n            console.log(\"Error= False\", typeof(data), http_res.headers);\r\n            callback(false, data);\r\n        });\r\n\r\n        http_res.on(\"error\", function (err) {\r\n            console.log(\"err= \" + err);\r\n            callback(true, null);\r\n        });\r\n    });\r\n};\r\n\r\napi.run('GET', '/api/v2/users/me', \"eyJ0eXAiOiJKV1QiLCJhbGciOiJSUzI1NiIsIng1dCI6Ii1zeE1KTUxDSURXTVRQdlp5SjZ0eC1DRHh3MCIsImtpZCI6Ii1zeE1KTUxDSURXTVRQdlp5SjZ0eC1DRHh3MCJ9.eyJhdWQiOiIxMzRhMmEzYS02MjI0LTQ1ODQtOTNmNi1iMWYzOGNlNWZiZGMiLCJpc3MiOiJodHRwczovL3N0cy53aW5kb3dzLm5ldC82MTA4ODg1Zi0xNzg3LTQzZmUtYjBiMi1lY2Q2YzA5Y2Y5NTUvIiwiaWF0IjoxNTUxNDAzMzIzLCJuYmYiOjE1NTE0MDMzMjMsImV4cCI6MTU1MTQwNzIyMywiYWlvIjoiQVNRQTIvOEtBQUFBT0FLUjFtR3p4ZXdQdHFPQjlHUzFoN3RqellLdVNoWXJKbG5HNUI1V3dJZz0iLCJhbXIiOlsicHdkIl0sImZhbWlseV9uYW1lIjoiRmx5bm4iLCJnaXZlbl9uYW1lIjoiU3RldmUiLCJpcGFkZHIiOiI2Ny44Ny4yMTEuMjM2IiwibmFtZSI6IlN0ZXZlIEZseW5uIiwibm9uY2UiOiI3NWVkMzEyNS1jNDFmLTQzYjMtOGQ3MC01ZmI3NmQzYTJmYjMiLCJvaWQiOiJiMDg4YmY5Yi1kYWJlLTRmZGUtYjRmMS03ZmQ4OGY5YjUwMGIiLCJyb2xlcyI6WyJBZG1pbmlzdHJhdG9yIl0sInN1YiI6IkRxVlVBU3o5aEJMb1MtRDdaR3VEZ2ZzbXlUTUo0N245ODJZbkVzVGl5VVUiLCJ0aWQiOiI2MTA4ODg1Zi0xNzg3LTQzZmUtYjBiMi1lY2Q2YzA5Y2Y5NTUiLCJ1bmlxdWVfbmFtZSI6InN0ZXZlLmZseW5uQGVudmlzaW9uYmxvY2tjaGFpbi5jb20iLCJ1cG4iOiJzdGV2ZS5mbHlubkBlbnZpc2lvbmJsb2NrY2hhaW4uY29tIiwidXRpIjoiOXNCazJTbE45VXlkRXdMVlZkNEJBQSIsInZlciI6IjEuMCJ9.Z2lX7mHEnGgXKwGMB17sOTd7fdmgcq1o_H7okJ7m63KGTPxBpa-BO4gyAWoagCiozGr31cyNEwsukfYjFQREphm0j8Ik56cHEmi6XjoslknvPL3EQwUc5hdv_yliaXVohxAzeNaazym18bUbRPWf8bk_9cQM2f7UkLUPQwuLpz0SsWf-nZSn5qoYPet3QeZV-w6WluzQxAXxgXEugB58hkYu5m_tXK4CKntS1BbgWwjXX3Wy3MH1LBi85SBKGhz7_NUBDVGAOM9U6tV1DZaie93ivMGWHg0NoCbIOyuoMc2A7PRWh7yO0Fnrp7s8uXeDDkCUYXv1ZJMUFZe00KcA_g\", function(err, data){\r\n  if(err){\r\n    console.log(err);\r\n  }\r\n  else{\r\n    console.log(data);\r\n  }\r\n});\r\n\r\nmodule.exports=api;\r\n","import React, { Component } from 'react';\r\n// import Home from './components/Home';\r\n// import Layout from './components/Layout';\r\n// import HelloWorld from './components/HelloWorld';\r\n\r\n\r\nclass App extends Component {\r\n    render() {\r\n    return (\r\n      <div className=\"App\">\r\n        <center>\r\n          <h1>Choose which version of our app to use</h1>\r\n          <a href=\"/dashboard\"> Workbench </a>\r\n          <p><h3>Eth Baas</h3></p>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React, { Component } from 'react';\r\nimport {BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport 'adal-angular';\r\nimport AuthenticationContext from 'adal-angular';\r\n\r\n\r\n//Set up adal\r\nvar config ={\r\n    clientId: '134a2a3a-6224-4584-93f6-b1f38ce5fbdc',\r\n};\r\n\r\nclass Workbench extends Component {\r\n  render() {\r\n    //create authentication Context and check cached users\r\n    var authContext = new AuthenticationContext(config);\r\n    authContext.handleWindowCallback();\r\n\r\n    //authContext.isCallback(\"tessdfgt\");\r\n    return (\r\n      <div className=\"App\">\r\n        <center>\r\n          <h1>Azure login test</h1>\r\n          <button onClick={() => { this.login(authContext) }}\r\n                  className=\"btn btn-secondary btn-sm\">Login</button>\r\n          <button onClick={() => { this.logout(authContext) }}\r\n                  className=\"btn btn-secondary btn-sm\">Logout</button>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  login(authContext){\r\n    var user = authContext.getCachedUser();\r\n    if (!user) {\r\n      authContext.login();\r\n    }\r\n    else {\r\n      console.log(user);\r\n    }\r\n  }\r\n\r\n  logout(authContext) {\r\n    authContext.logOut();\r\n  }\r\n}\r\n\r\nexport default Workbench;\r\n","import React from 'react';\r\nimport { Menu, Icon } from 'semantic-ui-react';\r\nimport {Link} from 'react-router-dom';\r\n\r\nexport default () => {\r\n  return (\r\n    <Menu style={{ marginTop:'0px',}} size={'large'}>\r\n      <Menu.Item><Link to='/'>Azure UI</Link></Menu.Item>\r\n      <Menu.Menu position=\"right\">\r\n        <Menu.Item><Link to='/helloworld'><Icon name='tasks' />Hello World!</Link></Menu.Item>\r\n      </Menu.Menu>\r\n    </Menu>\r\n  );\r\n};","import React, { Component } from 'react';\r\nimport AuthenticationContext from 'adal-angular';\r\nimport { Redirect } from 'react-router-dom';\r\nimport api from '../helpers/Api.js';\r\nimport Header from '../components/Header.js';\r\n\r\n\r\n//Set up adal\r\nvar config ={\r\n    clientId: '134a2a3a-6224-4584-93f6-b1f38ce5fbdc',\r\n};\r\n\r\nvar context={\r\n  token : \"#$G\",\r\n  data : \"NOT CHANGED\"\r\n}\r\n\r\nclass Dashboard extends Component {\r\n  render(){\r\n    var that=this;\r\n\r\n    //create authentication Context and check cached users\r\n    var authContext = new AuthenticationContext(config);\r\n    authContext.handleWindowCallback();\r\n\r\n    //check if user is authenticated\r\n    var user = authContext.getCachedUser();\r\n    if(!user){\r\n      authContext.login();\r\n    }\r\n    else{\r\n      authContext.acquireToken(config.clientId, function(err, accessToken){\r\n        if(!err){\r\n          //this.setToken(accessToken);\r\n          that.context.token=accessToken;\r\n        }\r\n        else{\r\n          that.context.token=err;\r\n        }\r\n      });\r\n    }\r\n\r\n    //pull data from Api\r\n    api.run('GET', '/api/v2/users/me', that.context.token, function(err, data){\r\n      if(!err){\r\n        that.context.data=data;\r\n      }\r\n      else{\r\n        console.log(\"err in dashboard= \" + err);\r\n        that.context.data=err;\r\n      }\r\n    });\r\n\r\n    return(\r\n      <div>\r\n        <Header />\r\n        <center>\r\n          <h1>Welcome to the dasboard</h1>\r\n          <h4>{that.context.data}</h4>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setToken(newToken){\r\n    console.log(\"assign token\");\r\n    this.context.token=newToken\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\r\nimport Workbench from './workbench/login.js';\r\nimport Dashboard from './workbench/Dashboard.js';\r\n\r\n\r\n\r\nconst routing= (\r\n  <Router>\r\n    <div>\r\n      <Route exact path=\"/\" component={App} />\r\n      <Route path=\"/workbench\" component={Workbench} />\r\n      <Route path=\"/dashboard\" component={Dashboard} />\r\n    </div>\r\n  </Router>\r\n)\r\n\r\nReactDOM.render(routing, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}