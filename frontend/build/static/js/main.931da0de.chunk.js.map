{"version":3,"sources":["ethereum/web3.js","components/Home.js","components/Header.js","components/Layout.js","ethereum/contractInstance.js","components/HelloWorld.js","App.js","serviceWorker.js","index.js"],"names":["web3","Home","state","loadingData","this","setState","document","title","react_default","a","createElement","Dimmer","active","inverted","Loader","size","Component","Header","Menu","style","marginTop","Item","Link","to","position","Icon","name","Layout","props","Container","rel","href","children","_callee","regenerator_default","wrap","_context","prev","next","eth","getAccounts","sent","alert","stop","window","Web3","currentProvider","get_account","provider","providers","HttpProvider","net","getNetworkType","err","netId","ContractInstance","Contract","constant","inputs","type","outputs","payable","stateMutability","HelloWorld","errorMessage","msg","msgVal","account","existingMsg","onSubmit","event","res","preventDefault","_this","loading","methods","postMsg","send","from","console","log","t0","message","accounts","getMsg","call","statusMessage","_this2","Message","floating","positive","header","content","Form","error","Group","Field","width","Input","onChange","target","value","Button","floated","primary","basic","disabled","App","BrowserRouter","Switch","Route","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","src_App","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.931da0de.chunk.js","sourcesContent":["import Web3 from 'web3';\n\nlet web3, defaultAcc;\nfunction networkCheck(){\n  web3.eth.net.getNetworkType((err, netId) => {\n  switch (netId) {\n    case \"main\":\n    alert(\"This is Mainnet. Please switch to Azure PoA Network!\");\n    break\n    case \"ropsten\":\n    alert(\"This is Ropsten test network. Please switch to Azure PoA Network!\");\n    break\n    case \"rinkeby\":\n    alert(\"This is Rinkeby test network! Please switch to Azure PoA Network!\");\n    break\n    case \"kovan\":\n    alert(\"This is Kovan test network. Please switch to Azure PoA Network!\");\n    break\n    default:\n    //alert(\"Nice! It looks like you're connected to Azure PoA Network!\");\n  }\n  })\n}\n\nasync function get_account(){\n  defaultAcc = await web3.eth.getAccounts();\n  if (defaultAcc[0] == null){\n    // User is not logged in\n    alert(\"Please Login To MetaMask And Refresh Page\");\n  }\n}\n\nif (typeof window !== 'undefined' && typeof window.web3 !== 'undefined') {\n  // We are in the browser and metamask is running.\n\n  //const provider = new Web3.providers.HttpProvider(\"http://ethygqbek-dns-reg1.eastus.cloudapp.azure.com:8540\");\n  //web3 = new Web3(provider);\n  web3 = new Web3(window.web3.currentProvider);\n  get_account();\n  \n}else{\n  // User is not running metamask\n\n  alert(\"Please Install MetaMask from metamask.io\");\n  const provider = new Web3.providers.HttpProvider(\"http://ethygqbek-dns-reg1.eastus.cloudapp.azure.com:8540\");\n  web3 = new Web3(provider);\n}\n\nnetworkCheck();\n\nexport default web3;","import React, { Component } from 'react';\nimport {Loader, Dimmer} from 'semantic-ui-react';\n//import {Link} from 'react-router-dom';\n\nclass Home extends Component {\n    state = {\n    loadingData:false,\n  }\n\n  async componentDidMount(){\n    this.setState({loadingData:true});\n    document.title = \"Azure UI\";\n    this.setState({loadingData:false});\n  }\n\n  render() {\n    if(this.state.loadingData){\n      return (\n        <Dimmer active inverted>\n        <Loader size='massive'>Loading...</Loader>\n        </Dimmer>\n      );\n    }\n\n    return (\n      <div>\n        <h1>Hi There!</h1>\n      </div>\n    );\n  }\n}\n\nexport default Home;","import React from 'react';\nimport { Menu, Icon } from 'semantic-ui-react';\nimport {Link} from 'react-router-dom';\n\nexport default () => {\n  return (\n    <Menu style={{ marginTop:'0px',}} size={'large'}>\n      <Menu.Item><Link to='/'>Azure UI</Link></Menu.Item>\n      <Menu.Menu position=\"right\">\n        <Menu.Item><Link to='/helloworld'><Icon name='tasks' />Hello World!</Link></Menu.Item>\n      </Menu.Menu>\n    </Menu>\n  );\n};","import React from 'react';\nimport {Container} from 'semantic-ui-react';\nimport Header from './Header';\n\nexport default props => {\n  return (\n    <Container>\n      <link rel=\"stylesheet\" href=\"//cdnjs.cloudflare.com/ajax/libs/semantic-ui/2.3.3/semantic.min.css\"></link>\n      <Header />\n      {props.children}\n    </Container>\n  );\n};","import web3 from './web3';\n//import Zatanna from './build/Zatanna.json';\n\nvar address = \"0xdcca47d0396ccdd76fbfe9dc779f619184df9357\";\nvar abi = [{\"constant\": false,\"inputs\": [{\"name\": \"text\",\"type\": \"string\"}],\"name\": \"postMsg\",\"outputs\": [],\"payable\": false,\"stateMutability\": \"nonpayable\",\"type\": \"function\"},{\"constant\": true,\"inputs\": [],\"name\": \"getMsg\",\"outputs\": [{\"name\": \"\",\"type\": \"string\"}],\"payable\": false,\"stateMutability\": \"view\",\"type\": \"function\"}];\n\n//const ZatannaInstance = new web3.eth.Contract(JSON.parse(Zatanna.interface), \"0x26f05c41a24a4f393584fea897ace39deb2281c2\");\nconst ContractInstance = new web3.eth.Contract(abi, address);\nexport default ContractInstance;\n","import React, { Component } from 'react';\nimport {Loader, Dimmer, Form, Input, Button, Message} from 'semantic-ui-react';\n//import {Link} from 'react-router-dom';\nimport web3 from '../ethereum/web3';\nimport ContractInstance from '../ethereum/contractInstance';\n\nclass HelloWorld extends Component {\n    state = {\n    loadingData:false,\n    errorMessage:'',\n    msg:'',\n    msgVal:'',\n    account:'',\n    existingMsg:'',\n  }\n\n  async componentDidMount(){\n    this.setState({loadingData:true});\n    document.title = \"Azure UI | HelloWorld\";\n\n    const accounts = await web3.eth.getAccounts();\n    let res = await ContractInstance.methods.getMsg().call({from:accounts[0]});\n    this.setState({loadingData:false, account:accounts[0], existingMsg:res});\n  }\n\n  onSubmit = async event => {\n    event.preventDefault();\n\n    this.setState({errorMessage:'', loading:true, msg:''});\n    try{\n      let res = await ContractInstance.methods.postMsg(this.state.msgVal).send({from:this.state.account});\n      console.log(res);\n      this.setState({msg:'Message pushed to Azure PoA blockchain!'});\n    }catch(err){\n      console.log(err);\n      this.setState({errorMessage:err.message, msg:''});\n    }\n\n    this.setState({loading:false});\n  }\n\n  render() {\n    if(this.state.loadingData){\n      return (\n        <Dimmer active inverted>\n        <Loader size='massive'>Loading...</Loader>\n        </Dimmer>\n      );\n    }\n\n    let statusMessage;\n\n    if (this.state.msg === ''){\n      statusMessage = null;\n    }else{\n      statusMessage = <Message floating positive header=\"Success!\" content={this.state.msg} />;\n    }\n\n    return (\n      <div>\n        <h1>Hello World Contract!</h1>\n        <h3>Existing message: {this.state.existingMsg}</h3>\n         <Form onSubmit={this.onSubmit} error={!!this.state.errorMessage}>\n          <Form.Group>\n            <Form.Field width={12}>\n              <label>Enter Message</label>\n              <Input onChange={event => this.setState({msgVal:event.target.value})} />\n            </Form.Field>\n            <Button size='small' floated='right' primary basic loading={this.state.loading} disabled={this.state.loading}>\n              Push\n            </Button>\n          </Form.Group>\n          <Message error header=\"Oops!\" content={this.state.errorMessage} />\n          {statusMessage}\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default HelloWorld;","import React, { Component } from 'react';\nimport {BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Home from './components/Home';\nimport Layout from './components/Layout';\nimport HelloWorld from './components/HelloWorld';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Layout>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/helloworld\" component={HelloWorld} />\n          </Switch>\n        </Layout>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}