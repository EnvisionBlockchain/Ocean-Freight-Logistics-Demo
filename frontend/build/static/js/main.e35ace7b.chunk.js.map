{"version":3,"sources":["helpers/Api.js","App.js","serviceWorker.js","components/workbench/login.js","components/workbench/Dashboard.js","index.js"],"names":["https","require","api","method","path","token","callback","options","hostname","this","headers","accept","Authorization","get","http_res","data","on","chunk","console","log","module","exports","App","react_default","a","createElement","className","href","Component","Boolean","window","location","match","config","clientId","Workbench","_this","authContext","AuthenticationContext","handleWindowCallback","onClick","login","logout","user","getCachedUser","logOut","Dashboard","that","acquireToken","err","accessToken","setToken","context","run","newToken","routing","BrowserRouter","Route","exact","component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAA,IAAMA,EAAQC,EAAQ,IAGlBC,EAAI,CAERA,MAAU,gBAEVA,IAAQ,SAASC,EAAQC,EAAMC,EAAOC,GAClC,IAAMC,EAAU,CACdC,SAAU,8CACVL,OAAOA,EACPC,KAAKK,KAAKL,KACVM,QAAQ,CACNC,OAAO,mBACPC,cAAc,UAAYP,IAI9BL,EAAMa,IAAIN,EAAS,SAASO,GAC1B,IAAIC,EAAO,GAGVD,EAASE,GAAG,OAAQ,SAAUC,GAE1BC,QAAQC,IAAIF,GACZF,GAAQE,IAIZH,EAASE,GAAG,MAAO,WAEdV,GAAS,EAAOS,KAGpBD,EAASE,GAAG,QAAS,WAGjBV,GAAS,EAAM,YAS3Bc,EAAOC,QAAQnB,6NCxBAoB,mLAdX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,KAAGE,KAAK,cAAR,eACAJ,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAAA,gCAPKG,aCMEC,QACW,cAA7BC,OAAOC,SAASvB,UAEe,UAA7BsB,OAAOC,SAASvB,UAEhBsB,OAAOC,SAASvB,SAASwB,MACvB,gGCXFC,EAAQ,CACRC,SAAU,wCAsCCC,mLAlCJ,IAAAC,EAAA3B,KAEH4B,EAAc,IAAIC,IAAsBL,GAI5C,OAHAI,EAAYE,uBAIVhB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,8BACAF,EAAAC,EAAAC,cAAA,UAAQe,QAAS,WAAQJ,EAAKK,MAAMJ,IAC5BX,UAAU,4BADlB,SAEAH,EAAAC,EAAAC,cAAA,UAAQe,QAAS,WAAQJ,EAAKM,OAAOL,IAC7BX,UAAU,4BADlB,0CAOFW,GACJ,IAAIM,EAAON,EAAYO,gBAClBD,EAIHzB,QAAQC,IAAIwB,GAHZN,EAAYI,uCAOTJ,GACLA,EAAYQ,gBA/BQjB,8BCJpBK,EAAQ,CACRC,SAAU,wCA2DCY,mLAjDX,IAAIC,EAAKtC,KAGL4B,EAAc,IAAIC,IAAsBL,GA8B5C,OA7BAI,EAAYE,uBAGDF,EAAYO,gBAKrBP,EAAYW,aAAaf,EAAOC,SAAU,SAASe,EAAKC,GAClDD,EAKFF,EAAKI,SAASF,GAHdF,EAAKK,QAAQ/C,MAAM6C,IANvBb,EAAYI,QAedvC,IAAImD,IAAI,MAAO,mBAAoB5C,KAAK2C,QAAQ/C,MAAO,SAAS4C,EAAKlC,GAKjEgC,EAAKK,QAAQrC,KAJXkC,GACgBlC,IAQpBQ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,qCACAF,EAAAC,EAAAC,cAAA,UAAKsB,EAAKK,QAAQrC,yCAMjBuC,GACPpC,QAAQC,IAAI,gBACZV,KAAK2C,QAAQ/C,MAAMiD,SA/CC1B,aCLlB2B,EACJhC,EAAAC,EAAAC,cAAC+B,EAAA,EAAD,KACEjC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOC,OAAK,EAACtD,KAAK,IAAIuD,UAAWrC,IACjCC,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOrD,KAAK,aAAauD,UAAWxB,IACpCZ,EAAAC,EAAAC,cAACgC,EAAA,EAAD,CAAOrD,KAAK,aAAauD,UAAWb,MAK1Cc,IAASC,OAAON,EAASO,SAASC,eAAe,SH4G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e35ace7b.chunk.js","sourcesContent":["const https = require('https');\r\n\r\n\r\nvar api={};\r\n\r\napi._path='/api/v1/users';\r\n\r\napi.run=function(method, path, token, callback){\r\n    const options = {\r\n      hostname: 'ethpoasanboxwb-ohtlvu-api.azurewebsites.net',\r\n      method:method,\r\n      path:this.path,\r\n      headers:{\r\n        accept:'application/json',\r\n        Authorization:\"Bearer \" + token\r\n      }\r\n    };\r\n\r\n    https.get(options, function(http_res){\r\n      var data = \"\";\r\n\r\n      // this event fires many times, each time collecting another piece of the response\r\n       http_res.on(\"data\", function (chunk) {\r\n           // append this chunk to our growing `data` var\r\n           console.log(chunk);\r\n           data += chunk;\r\n       });\r\n\r\n       // this event fires *one* time, after all the `data` events/chunks have been gathered\r\n       http_res.on(\"end\", function () {\r\n            // you can use res.send instead of console.log to output via express\r\n            callback(false, data);\r\n        });\r\n\r\n        http_res.on(\"error\", function () {\r\n            // append this chunk to our growing `data` var\r\n            //console.log(http_res.error);\r\n            callback(true, null);\r\n        });\r\n    })\r\n};\r\n\r\n\r\n// api.run('GET','/api/v1/users','al;sdkjhg', function(data){\r\n//   console.log(data);\r\n// });\r\nmodule.exports=api;\r\n","import React, { Component } from 'react';\n// import Home from './components/Home';\n// import Layout from './components/Layout';\n// import HelloWorld from './components/HelloWorld';\n\n\nclass App extends Component {\n    render() {\n    return (\n      <div className=\"App\">\n        <center>\n          <h1>Choose which version of our app to use</h1>\n          <a href=\"/dashboard\"> Workbench </a>\n          <p><h3>Eth Baas</h3></p>\n        </center>\n      </div>\n    );\n  }\n}\n\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React, { Component } from 'react';\r\nimport {BrowserRouter, Route, Switch, Link } from 'react-router-dom';\r\nimport 'adal-angular';\r\nimport AuthenticationContext from 'adal-angular';\r\n\r\n\r\n//Set up adal\r\nvar config ={\r\n    clientId: '134a2a3a-6224-4584-93f6-b1f38ce5fbdc',\r\n};\r\n\r\nclass Workbench extends Component {\r\n  render() {\r\n    //create authentication Context and check cached users\r\n    var authContext = new AuthenticationContext(config);\r\n    authContext.handleWindowCallback();\r\n\r\n    //authContext.isCallback(\"tessdfgt\");\r\n    return (\r\n      <div className=\"App\">\r\n        <center>\r\n          <h1>Azure login test</h1>\r\n          <button onClick={() => { this.login(authContext) }}\r\n                  className=\"btn btn-secondary btn-sm\">Login</button>\r\n          <button onClick={() => { this.logout(authContext) }}\r\n                  className=\"btn btn-secondary btn-sm\">Logout</button>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  login(authContext){\r\n    var user = authContext.getCachedUser();\r\n    if (!user) {\r\n      authContext.login();\r\n    }\r\n    else {\r\n      console.log(user);\r\n    }\r\n  }\r\n\r\n  logout(authContext) {\r\n    authContext.logOut();\r\n  }\r\n}\r\n\r\nexport default Workbench;\r\n","import React, { Component } from 'react';\r\nimport AuthenticationContext from 'adal-angular';\r\nimport { Redirect } from 'react-router-dom';\r\nimport api from '../../helpers/Api.js';\r\n\r\n\r\n//Set up adal\r\nvar config ={\r\n    clientId: '134a2a3a-6224-4584-93f6-b1f38ce5fbdc',\r\n};\r\n\r\nvar context={\r\n  token : \"#$G\",\r\n  data : \"\"\r\n}\r\n\r\nclass Dashboard extends Component {\r\n  render(){\r\n    var that=this;\r\n\r\n    //create authentication Context and check cached users\r\n    var authContext = new AuthenticationContext(config);\r\n    authContext.handleWindowCallback();\r\n\r\n    //check if user is authenticated\r\n    var user = authContext.getCachedUser();\r\n    if(!user){\r\n      authContext.login();\r\n    }\r\n    else{\r\n      authContext.acquireToken(config.clientId, function(err, accessToken){\r\n        if(!err){\r\n          //this.setToken(accessToken);\r\n          that.context.token=accessToken;\r\n        }\r\n        else{\r\n          that.setToken(err);\r\n        }\r\n      });\r\n    }\r\n\r\n    //pull data from Api\r\n    api.run('GET', '/api/v2/users/me', this.context.token, function(err, data){\r\n      if(!err){\r\n        that.context.data=data;\r\n      }\r\n      else{\r\n        that.context.data=err;\r\n      }\r\n    });\r\n\r\n    return(\r\n      <div>\r\n        <center>\r\n          <h1>Welcome to the dasboard</h1>\r\n          <h4>{that.context.data}</h4>\r\n        </center>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  setToken(newToken){\r\n    console.log(\"assign token\");\r\n    this.context.token=newToken\r\n  }\r\n}\r\n\r\nexport default Dashboard;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Route, Link, BrowserRouter as Router } from 'react-router-dom'\nimport Workbench from './components/workbench/login.js';\nimport Dashboard from './components/workbench/Dashboard.js';\n\n\n\nconst routing= (\n  <Router>\n    <div>\n      <Route exact path=\"/\" component={App} />\n      <Route path=\"/workbench\" component={Workbench} />\n      <Route path=\"/dashboard\" component={Dashboard} />\n    </div>\n  </Router>\n)\n\nReactDOM.render(routing, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}